# lint-disable input-object-fields-sorted-alphabetically
# lint-disable type-fields-sorted-alphabetically

directive @juniper(
  ownership: String = "borrowed"
  infallible: Boolean = false
  with_time_zone: Boolean = true # lint-disable-line input-object-values-are-camel-cased
) on FIELD_DEFINITION

"""
An opaque identifier that uniquely identifies an object within a connection.
The cursor should be stable and unique to the object, as long as the parameters
of the connection don't change (filter, sort, etc.), and the sequence isn't
mutated.
"""
scalar Cursor

# We can't put a description here because of juniper limitations.
scalar DateTimeUtc # lint-disable-line types-have-descriptions
schema {
  query: Query
  mutation: Mutation
}

"""
The root query.
"""
type Query {
  """
  Fetch a single node, of any type, via a UUID.
  """
  node(
    """
    The UUID of the node to fetch.
    """
    id: ID!
  ): Node @juniper(ownership: "owned")

  """
  Data related to the currently logged-in user.
  """
  authStatus: AuthStatus! @juniper(infallible: true, ownership: "owned")

  """
  Get a single user by their username.
  """
  user(
    """
    The username of the user to fetch.
    """
    username: String!
  ): UserNode @juniper(ownership: "owned")

  """
  Get a single hardware spec by its slug.
  """
  hardwareSpec(
    """
    The unique slug of the hardware spec to fetch.
    """
    slug: String!
  ): HardwareSpecNode @juniper(ownership: "owned")

  """
  All the hardware specs in the system.
  """
  hardwareSpecs(
    """
    The maximum number of results to return. If not provided, will be unlimited.
    """
    first: Int
    """
    The cursor AFTER which elements will start being included. The element
    referred to by this cursor WILL NOT be in the output. The first element in
    the output will be the element AFTER this cursor.
    """
    after: Cursor
  ): HardwareSpecConnection! @juniper(ownership: "owned")
}

"""
An object with a globally unique ID.
"""
interface Node {
  """
  The ID of the object.
  """
  id: ID! @juniper(infallible: true, ownership: "owned")
}

"""
A related object. Appears in a connection (i.e. a list).
"""
interface Edge {
  """
  A cursor that identifies this edge within the connection.
  """
  cursor: Cursor! @juniper(infallible: true)
}

"""
A view to access a list of edges.
"""
interface ConnectionInterface {
  """
  Total number of edges in the connection, across all pages. Any relevant
  filters will be applied to the count.
  """
  totalCount: Int! @juniper(ownership: "owned")

  """
  Metadata for the current page of data being requested.
  """
  pageInfo: PageInfo! @juniper(ownership: "owned")
}

"""
Connection page metadata.
"""
type PageInfo {
  """
  The cursor of the first edge in the page. Null iff the page is empty.
  """
  startCursor: Cursor @juniper(infallible: true)

  """
  The cursor of the last edge in the page. Null iff the page is empty.
  """
  endCursor: Cursor @juniper(infallible: true)

  """
  Is there another page in the connection before this one?
  """
  hasPreviousPage: Boolean! @juniper(infallible: true, ownership: "owned")

  """
  Is there another page in the connection after this one?
  """
  hasNextPage: Boolean! @juniper(infallible: true, ownership: "owned")
}

# ===== USER =====

"""
A user of the platform.
"""
type UserNode implements Node {
  """
  UUID for this node.
  """
  id: ID! @juniper(infallible: true, ownership: "owned")

  """
  Unique name for this user. This is public, and can/should be presented to
  the user and others.
  """
  username: String! @juniper(infallible: true)
}

"""
Edge for UserNode.
"""
type UserEdge implements Edge {
  """
  The related node.
  """
  node: UserNode! @juniper(infallible: true)
  """
  Identifier for this edge.
  """
  cursor: Cursor! @juniper(infallible: true)
}

"""
A wrapper for data related to the current user's authentication.
"""
type AuthStatus {
  """
  Is this user currently logged in?
  """
  authenticated: Boolean! @juniper(infallible: true, ownership: "owned")

  """
  Is the user logged in AND have they created a username for themself?
  """
  userCreated: Boolean! @juniper(infallible: true, ownership: "owned")

  """
  The full user object for the authenticated user. This will be populated
  iff `userCreated` is `true`.
  """
  user: UserNode @juniper(ownership: "owned")
}

# ===== HARDWARE SPEC =====

"""
A hardware spec defines the hardware parameters that a program runs under.
This defines what resources the program has access to (registers, stacks, etc.).
"""
type HardwareSpecNode implements Node {
  """
  UUID for this node.
  """
  id: ID! @juniper(infallible: true, ownership: "owned")

  """
  URL-friendly slug for this spec. Unique across all hardware specs.
  """
  slug: String! @juniper(infallible: true)

  """
  User-friendly name for this spec. Unique across all hardware specs.
  """
  name: String! @juniper(infallible: true)

  """
  Number of registers that this hardware provides to a program.
  """
  numRegisters: Int! @juniper(infallible: true, ownership: "owned")

  """
  Number of stacks that this hardware provides to a program.
  """
  numStacks: Int! @juniper(infallible: true, ownership: "owned")

  """
  The maximum length for each stack while the program is running.
  """
  maxStackLength: Int! @juniper(infallible: true, ownership: "owned")

  """
  A single program spec that runs on this hardware.
  """
  programSpec(
    """
    The unique slug of the program spec to fetch. Note that the slug is only
    unique to this hardware spec, not globally!
    """
    slug: String!
  ): ProgramSpecNode @juniper(ownership: "owned")

  """
  All the program specs that can run on this hardware spec.
  """
  programSpecs(
    """
    The maximum number of results to return. If not provided, will be unlimited.
    """
    first: Int
    """
    The cursor AFTER which elements will start being included. The element
    referred to by this cursor WILL NOT be in the output. The first element in
    the output will be the element AFTER this cursor.
    """
    after: Cursor
  ): ProgramSpecConnection! @juniper(ownership: "owned")
}

"""
Edge for HardwareSpecNode.
"""
type HardwareSpecEdge implements Edge {
  """
  The related node.
  """
  node: HardwareSpecNode! @juniper(infallible: true)
  """
  Identifier for this edge.
  """
  cursor: Cursor! @juniper(infallible: true)
}

"""
A collection of HardwareSpecNodes.
"""
type HardwareSpecConnection implements ConnectionInterface {
  """
  See Connection definition.
  """
  totalCount: Int! @juniper(ownership: "owned")
  """
  See Connection definition.
  """
  pageInfo: PageInfo! @juniper(ownership: "owned")
  """
  The queried hardware specs.
  """
  edges: [HardwareSpecEdge!]! @juniper(ownership: "owned")
}

# ===== PROGRAM SPEC =====

"""
A definition of a particular program for a piece of hardware. This defines the
parameters that a program is supposed to match. In order words, this is a single
puzzle definition.
"""
type ProgramSpecNode implements Node {
  """
  UUID for this node.
  """
  id: ID! @juniper(infallible: true, ownership: "owned")

  """
  URL-friendly name for this program spec. Unique across the program specs
  for a particular hardware spec. Two program specs can have the same slug iff
  they run on different hardware.
  """
  slug: String! @juniper(infallible: true)

  """
  User-friendly name for this program spec. Unique across the program specs
  for a particular hardware spec.
  """
  name: String! @juniper(infallible: true)

  """
  Description of the program spec. Could generally describe it, describe the
  input and expected output, etc.
  """
  description: String! @juniper(infallible: true)

  """
  The input to the program.
  """
  input: [Int!]! @juniper(infallible: true, ownership: "owned")

  """
  The output that the program is expected to give.
  """
  expectedOutput: [Int!]! @juniper(infallible: true, ownership: "owned")

  """
  The hardware that this program runs on.
  """
  hardwareSpec: HardwareSpecNode! @juniper(ownership: "owned")

  """
  A single user's single solution to this program spec.
  """
  userProgram(
    """
    The unique name of the program to fetch. Note that this is only unique to this
    program spec, not globally!
    """
    fileName: String!
  ): UserProgramNode @juniper(ownership: "owned")

  """
  All of a single user's solutions to this program spec.
  """
  userPrograms(
    """
    The maximum number of results to return. If not provided, will be unlimited.
    """
    first: Int
    """
    The cursor AFTER which elements will start being included. The element
    referred to by this cursor WILL NOT be in the output. The first element in
    the output will be the element AFTER this cursor.
    """
    after: Cursor
  ): UserProgramConnection! @juniper(ownership: "owned")
}

"""
Edge for ProgramSpecNode.
"""
type ProgramSpecEdge implements Edge {
  """
  The related node.
  """
  node: ProgramSpecNode! @juniper(infallible: true)
  """
  Identifier for this edge.
  """
  cursor: Cursor! @juniper(infallible: true)
}

"""
A collection of ProgramSpecNodes.
"""
type ProgramSpecConnection implements ConnectionInterface {
  """
  See Connection definition.
  """
  totalCount: Int! @juniper(ownership: "owned")
  """
  See Connection definition.
  """
  pageInfo: PageInfo! @juniper(ownership: "owned")
  """
  The queried program specs.
  """
  edges: [ProgramSpecEdge!]! @juniper(ownership: "owned")
}

# ===== USER PROGRAMS =====

"""
A user's solution to a particular program spec. One user can have multiple
solutions per program.
"""
type UserProgramNode implements Node {
  """
  UUID for this node.
  """
  id: ID! @juniper(infallible: true, ownership: "owned")
  """
  Name for this source file. This is unique among the user-program spec pair.
  """
  fileName: String! @juniper(infallible: true)
  """
  The program source code.
  """
  sourceCode: String! @juniper(infallible: true)
  """
  The date/time when this object was created.
  """
  created: DateTimeUtc! @juniper(infallible: true)
  """
  The date/time when this object was last modified.
  """
  lastModified: DateTimeUtc! @juniper(infallible: true)
  """
  The user who owns this program code.
  """
  user: UserNode! @juniper(ownership: "owned")
  """
  The program spec for which this code was written.
  """
  programSpec: ProgramSpecNode! @juniper(ownership: "owned")
  """
  A statistical record of the last execution of this program. Will be null if
  the program hasn't been executed since the source was last modified. This is
  populated whenever the program is executed with a successful termination, and
  cleared whenever the source code is modified.
  """
  record: UserProgramRecordNode @juniper(ownership: "owned")
}

"""
Edge for UserProgramNode.
"""
type UserProgramEdge implements Edge {
  """
  The related node.
  """
  node: UserProgramNode! @juniper(infallible: true)
  """
  Identifier for this edge.
  """
  cursor: Cursor! @juniper(infallible: true)
}

"""
A collection of UserProgramNodes.
"""
type UserProgramConnection implements ConnectionInterface {
  """
  See Connection definition.
  """
  totalCount: Int! @juniper(ownership: "owned")
  """
  See Connection definition.
  """
  pageInfo: PageInfo! @juniper(ownership: "owned")
  """
  The queried user programs.
  """
  edges: [UserProgramEdge!]! @juniper(ownership: "owned")
}

"""
A record of a single execution of a program. Holds metadata about the execution,
include performance stats.
"""
type UserProgramRecordNode implements Node {
  """
  UUID for this node.
  """
  id: ID! @juniper(infallible: true, ownership: "owned")
  """
  The number of steps the program took before terminating.
  """
  cpuCycles: Int! @juniper(infallible: true, ownership: "owned")
  """
  The number of instructions in the compiled program. Unlike with CPU cycles,
  for this stat, every instruction is counted only once, regardless of how many
  times it's executed, even if it's never executed at all. This does not include
  labels, only executable steps.
  """
  instructions: Int! @juniper(infallible: true, ownership: "owned")
  """
  The number of unique user registers (e.g. RX0, RX1, etc.) REFERENCED by the
  program. If a register is only referenced by dead code, it will still be
  counted for this statistic; a register **does not** actually need to be
  accessed at runtime in order to count. A register that is referenced in
  multiple places will only count once.
  """
  registersUsed: Int! @juniper(infallible: true, ownership: "owned")
  """
  The number of unique stacks (e.g. S0, S1, etc.) REFERENCED by the
  program. If a stack is only referenced by dead code, it will still be
  counted for this statistic; a stack **does not** actually need to be
  accessed at runtime in order to count. A stack that is referenced in
  multiple places will only count once.
  """
  stacksUsed: Int! @juniper(infallible: true, ownership: "owned")
  """
  The date/time when the program execution completed.
  """
  created: DateTimeUtc! @juniper(infallible: true)
}

# +-----------------------------+
# |          MUTATIONS          |
# +-----------------------------+

"""
The root mutation. Some general notes about mutations:
- Slugs are generally derived from names, and cannot be set or changed manually
- Slugs are unique among some pool of rows. Because they are derived, it is
  possible to have two different values convert to the same slug, causing a
  collision. Keep this in mind.
- Slugs cannot be changed, in order to prevent breaking URLs.
- When modifying, if a field that is required on the node type is not required
  in the mutation input, then supplying no value will cause it to not change.
"""
type Mutation {
  """
  Perform first-time setup for a user. This needs to be run after first log in
  for a user. This can only be run once (subsequent calls will return an error).
  """
  initializeUser(
    """
    All input fields
    """
    input: InitializeUserInput!
  ): InitializeUserPayload! @juniper(ownership: "owned")

  """
  Create a new hardware spec. An error is returned if the given name is
  already taken, or if the slug derived from that name is already taken.
  """
  createHardwareSpec(
    """
    All input fields.
    """
    input: CreateHardwareSpecInput!
  ): CreateHardwareSpecPayload! @juniper(ownership: "owned")

  """
  Modify an existing hardware spec. The spec to modify will be identified by
  ID, and any field that is given a value will be updated.
  """
  updateHardwareSpec(
    """
    All input fields.
    """
    input: UpdateHardwareSpecInput!
  ): UpdateHardwareSpecPayload! @juniper(ownership: "owned")

  """
  Create a new program spec. An error is returned if the given name is
  already taken, or if the slug derived from that name is already taken.
  """
  createProgramSpec(
    """
    All input fields.
    """
    input: CreateProgramSpecInput!
  ): CreateProgramSpecPayload! @juniper(ownership: "owned")

  """
  Modify an existing program spec. The spec to modify will be identified by
  ID, and any field that is given a value will be updated.
  """
  updateProgramSpec(
    """
    All input fields.
    """
    input: UpdateProgramSpecInput!
  ): UpdateProgramSpecPayload! @juniper(ownership: "owned")

  """
  Create a new user program with a program spec and file name (belonging to the
  current user). An error is returned if there is already a user program with
  this program spec ID/file name, or if the program spec ID is invalid.
  """
  createUserProgram(
    """
    All input fields.
    """
    input: CreateUserProgramInput!
  ): CreateUserProgramPayload! @juniper(ownership: "owned")

  """
  Modify a existing user program.
  """
  updateUserProgram(
    """
    All input fields.
    """
    input: UpdateUserProgramInput!
  ): UpdateUserProgramPayload! @juniper(ownership: "owned")

  """
  Copy a user program. It will be identical, except it will have a new name
  generated based on the old name.
  """
  copyUserProgram(
    """
    All input fields.
    """
    input: CopyUserProgramInput!
  ): CopyUserProgramPayload! @juniper(ownership: "owned")

  """
  Delete a user program by ID.
  """
  deleteUserProgram(
    """
    All input fields.
    """
    input: DeleteUserProgramInput!
  ): DeleteUserProgramPayload! @juniper(ownership: "owned")

  """
  Execute a user program by ID. The source code for the user program will be
  compiled and executed. If there are any compile OR runtime errors, an error
  response will be returned. If execution is successful, then the statistics
  for the program will stored and the user's personal best scores will be
  updated if appropriate.
  """
  executeUserProgram(
    """
    All input fields.
    """
    input: ExecuteUserProgramInput!
  ): ExecuteUserProgramPayload! @juniper(ownership: "owned")
}

"""
Input to the `initializeUser` mutation.
"""
input InitializeUserInput {
  """
  New username to set. Must be non-empty and globally unique.
  """
  username: String!
}

"""
Output from the `initializeUser` mutation.
"""
type InitializeUserPayload {
  """
  The initialized user.
  """
  userEdge: UserEdge! @juniper(infallible: true, ownership: "owned")
}

"""
Input to the `createHardwareSpec` mutation.
"""
input CreateHardwareSpecInput {
  """
  The name of the hardware spec (must be unique).
  """
  name: String!
  """
  See `numRegisters` field on `HardwareSpecNode`.
  """
  numRegisters: Int!
  """
  See `numStacks` field on `HardwareSpecNode`.
  """
  numStacks: Int!
  """
  See `maxStackLength` field on `HardwareSpecNode`.
  """
  maxStackLength: Int!
}

"""
Output from the `createHardwareSpec` mutation.
"""
type CreateHardwareSpecPayload {
  """
  The created hardware spec.
  """
  hardwareSpecEdge: HardwareSpecEdge!
    @juniper(infallible: true, ownership: "owned")
}

"""
Input to the `updateHardwareSpec` mutation.
"""
input UpdateHardwareSpecInput {
  """
  The ID of the existing hardware spec to modify.
  """
  id: ID!
  """
  The new name of the hardware spec (must be unique).
  """
  name: String
  """
  See `numRegisters` field on `HardwareSpecNode`.
  """
  numRegisters: Int
  """
  See `numStacks` field on `HardwareSpecNode`.
  """
  numStacks: Int
  """
  See `maxStackLength` field on `HardwareSpecNode`.
  """
  maxStackLength: Int
}

"""
Output from the `updateHardwareSpec` mutation.
"""
type UpdateHardwareSpecPayload {
  """
  The modified hardware spec. `null` if the ID did not match any hardware specs.
  """
  hardwareSpecEdge: HardwareSpecEdge
    @juniper(infallible: true, ownership: "owned")
}

"""
Input to the `createProgramSpec` mutation.
"""
input CreateProgramSpecInput {
  """
  The ID of the hardware spec to create this program spec under.
  """
  hardwareSpecId: ID!

  """
  The name of the new program spec (must be unique).
  """
  name: String!
  """
  A description of the problem that this program spec defines.
  """
  description: String!
  """
  See `input` field on `ProgramSpecNode`.
  """
  input: [Int!]!
  """
  See `expectedOutput` field on `ProgramSpecNode`.
  """
  expectedOutput: [Int!]!
}

"""
Output from the `createProgramSpec` mutation.
"""
type CreateProgramSpecPayload {
  """
  The created program spec.
  """
  programSpecEdge: ProgramSpecEdge!
    @juniper(infallible: true, ownership: "owned")
}

"""
Input to the `updateProgramSpec` mutation.
"""
input UpdateProgramSpecInput {
  """
  The ID of the existing program spec to modify.
  """
  id: ID!
  """
  The new name of the program spec (must be unique).
  """
  name: String
  """
  A description of the problem that this program spec defines.
  """
  description: String
  """
  See `input` field on `ProgramSpecNode`.
  """
  input: [Int!]
  """
  See `expectedOutput` field on `ProgramSpecNode`.
  """
  expectedOutput: [Int!]
}

"""
Output from the `updateProgramSpec` mutation.
"""
type UpdateProgramSpecPayload {
  """
  The modified program spec. `null` if the ID did not match any program specs.
  """
  programSpecEdge: ProgramSpecEdge
    @juniper(infallible: true, ownership: "owned")
}

"""
Input to the `createUserProgram` mutation.
"""
input CreateUserProgramInput {
  """
  The program spec for which this source was written.
  """
  programSpecId: ID!
  """
  The name of the program source file.
  """
  fileName: String!
  """
  The source code for the new file. If not given, it will be an empty string.
  """
  sourceCode: String
}

"""
Output from the `createUserProgram` mutation.
"""
type CreateUserProgramPayload {
  """
  The created user program.
  """
  userProgramEdge: UserProgramEdge!
    @juniper(infallible: true, ownership: "owned")
}

"""
Input to the `updateUserProgram` mutation.
"""
input UpdateUserProgramInput {
  """
  The program spec for which this source was written.
  """
  id: ID!
  """
  The new name for the file. If not given, the existing name will be kept.
  """
  fileName: String
  """
  The new source code for the file. If not given, the existing source code
  will be kept.
  """
  sourceCode: String
}

"""
Output from the `updateUserProgram` mutation.
"""
type UpdateUserProgramPayload {
  """
  The updated user program. `null` if the ID did not match any user programs.
  """
  userProgramEdge: UserProgramEdge
    @juniper(infallible: true, ownership: "owned")
}

"""
Input to the `copyUserProgram` mutation.
"""
input CopyUserProgramInput {
  """
  The ID of the user program to copy.
  """
  id: ID!
}

"""
Output from the `copyUserProgram` mutation.
"""
type CopyUserProgramPayload {
  """
  The new user program. `null` if the given ID did not match any user programs.
  """
  userProgramEdge: UserProgramEdge
    @juniper(infallible: true, ownership: "owned")
}

"""
Input to the `deleteUserProgram` mutation.
"""
input DeleteUserProgramInput {
  """
  The ID of the user program to delete.
  """
  id: ID!
}

"""
Output from the `deleteUserProgram` mutation.
"""
type DeleteUserProgramPayload {
  """
  The ID of the deleted program. Will be `null` if no program existed with
  that ID. Will always be populated if the delete occurred.
  """
  deletedId: ID @juniper(infallible: true, ownership: "owned")
}

"""
Input for the `executeUserProgram` mutation.
"""
input ExecuteUserProgramInput {
  """
  The ID of the user program to execute.
  """
  id: ID!
}

"""
An error in a program that can be mapped to a particular chunk of source code.
Could be a compile error or a runtime error.
"""
type ProgramError {
  """
  The error as a formatted string.
  """
  message: String! @juniper(infallible: true)
  # If we end up processing this data on the UI, we may want to add more fields
  # here like span
}

"""
Machines are used to execute GDLK code. Each program executions occurs within
the context of a single machine. A MachineState gives a snapshot of an
executing machine at a particular moment.
"""
type MachineState {
  """
  The number of instructions that have been executed so far. This is non-unique,
  meaning if an instruction is executed twice, it will take up 2 cycles.
  """
  cpuCycles: Int! @juniper(infallible: true, ownership: "owned")
  # We may want to add more fields here, punting on that for now
}

"""
Program execution failed with one or more compilation errors.
"""
type ProgramCompileError {
  """
  The error(s) that caused compilation to fail.
  """
  errors: [ProgramError!]! @juniper(infallible: true)
}

"""
Program execution failed with a runtime error.
"""
type ProgramRuntimeError {
  """
  The error that caused the program to fail.
  """
  error: ProgramError! @juniper(infallible: true)
}

"""
Execution output when a program compiles and executes without error, but the
final state doesn't match the expected state (as defined by the program spec).
"""
type ProgramRejectedOutput {
  """
  The machine state at the time of program termination.
  """
  machine: MachineState! @juniper(infallible: true)
}

"""
Execution output when a program executes successfully.
1. It compiled without error
2. It executed without error
3. At the end, the input is empty and the output matches the program spec
"""
type ProgramAcceptedOutput {
  """
  The machine state at the time of program termination.
  """
  machine: MachineState! @juniper(infallible: true)
  """
  The statisical record of this program execution. Stores metadata about the
  execution.
  """
  record: UserProgramRecordNode! @juniper(infallible: true)
}

"""
The possible output states of a program execution. See individual types for more
info.
"""
union ExecuteUserProgramStatus =
    ProgramCompileError
  | ProgramRuntimeError
  | ProgramRejectedOutput
  | ProgramAcceptedOutput

"""
Output for the `executeUserProgram` mutation.
"""
type ExecuteUserProgramPayload {
  """
  Output data from the execution. The type of this field indicates the type of
  outcome, which could be one of:
  - Compile error
  - Runtime error
  - Rejected execution (incorrect input/output at termination)
  - Success
  """
  status: ExecuteUserProgramStatus @juniper(infallible: true)
}
